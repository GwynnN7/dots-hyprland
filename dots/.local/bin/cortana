#!/usr/bin/python
import os, sys, time, requests, argparse

def executeInBlue(sh):
    os.system(f"echo -e \"\\e[1;34m$({sh})\\e[0m\"")
    
if "CORTANA_PATH" not in os.environ:
    executeInBlue("echo CORTANA_PATH not set in the environment")
    exit(-1)
    
if "CORTANA_API" not in os.environ:
    executeInBlue("echo CORTANA_API not set in the environment")
    exit(-1)

api = os.environ.get("CORTANA_API")

def cortanaGet(route = ""):
    try:
        req = requests.get(f"{api}/{route}", headers={'Accept': 'text/plain', 'Accept-Charset':  'utf-8'})
        req.encoding = 'utf-8'
        return req.text.replace("'", "\\'")
    except:
        return "Cortana Offline"
    
def cortanaPost(route, param, argValue, arg = ""):
    try:
        req = requests.post(f"{api}/{route}", headers={'Accept': 'text/plain', 'Accept-Charset':  'utf-8'}, json={param: argValue, "args": arg})
        req.encoding = 'utf-8'
        return req.text
    except:
        return "Cortana Offline"

def requestAPI(route = ""):
    req = cortanaGet(route)
    executeInBlue(f"echo {req}")

command = " ".join(sys.argv[1:])
if len(sys.argv) > 1:
    if sys.argv[1] == "log":
        text = cortanaGet()
        cpuTemp = cortanaGet("raspberry/temperature")
        roomTemp = cortanaGet("sensors/temperature")
        if text == "Cortana Offline":
            executeInBlue(f"echo {text}")
        else:
            executeInBlue("echo {} \"~\" {}".format(text, cpuTemp))
            executeInBlue("echo Room Temperature: {}".format(roomTemp))
    elif sys.argv[1] == "run":
        os.system("\"$CORTANA_PATH\"/CortanaDesktop/out/CortanaDesktop")
    elif sys.argv[1] == "start":
        os.system("nohup \"$CORTANA_PATH\"/CortanaDesktop/out/CortanaDesktop &>~/.config/Cortana/Log/CortanaDesktop.log & disown;")
        executeInBlue("echo CortanaDesktop starting")
    elif sys.argv[1] == "boot":
        os.system("dotnet build -o \"$CORTANA_PATH\"/CortanaDesktop/out --artifacts-path \"$CORTANA_PATH\"/CortanaDesktop/out/lib \"$CORTANA_PATH\"/CortanaDesktop &>~/.config/Cortana/Log/CortanaBuild.log && cortana start")
        executeInBlue("echo CortanaDesktop booting")
    elif sys.argv[1] == "copy":
        os.system("rsync -ru --info=progress2 --force --delete --delete-excluded --filter=\":- \"\"$CORTANA_PATH\"\"/.gitignore\" \"$CORTANA_PATH\" cortana@192.168.178.117:~/")
    elif sys.argv[1] == "update":
        commit = " ".join(sys.argv[2:])
        if commit == "":
            executeInBlue("echo Update information needed")
        else:
            os.system(f"cd \"$CORTANA_PATH\" && git add . && git commit -m \"{commit}\" && git push")
            executeInBlue("echo Updating code...")
            time.sleep(2)
            res = cortanaPost("subfunctions/CortanaKernel", "action", "update")
            executeInBlue(f"echo {res}")
    elif sys.argv[1] == "stop":
        os.system("pkill CortanaDesktop")
        executeInBlue("echo CortanaDesktop stopped")
    else:
        parser = argparse.ArgumentParser()
        parser.add_argument("api", type=str, help="Api Route", default="")
        parser.add_argument("-act", dest="action", type=str, help="Action to perform", default="")
        parser.add_argument("-cmd", dest="command", type=str, help="Command to perform", default="")
        parser.add_argument("-arg", dest="arg", type=str, help="Command arguments", default="")
        parser.add_argument("-val", dest="value", type=str, help="Value to send", default="")
        args = parser.parse_args()

        path = "/".join(args.api.split(" "))

        if args.action != "":
            val = cortanaPost(path, "action", args.action)
        elif args.command != "":
            val = cortanaPost(path, "command", args.command, args.arg)
        elif args.value != "":
            val = cortanaPost(path, "value", args.value)
        else:
            val = cortanaGet(path)
        executeInBlue(f"echo {val}")
else:
    requestAPI()
    
    

    
